import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:provider/provider.dart';
import '../../state/organizer_store.dart';
import '../../models/event.dart';
import '../../services/auth_service.dart';
import '../../services/api_service.dart';
import '../../widgets/success_notification.dart';

class QRScannerScreen extends StatefulWidget {
  static const String routeName = '/qr-scanner';
  
  final EventModel? event; // Cho ph√©p null ƒë·ªÉ Student c√≥ th·ªÉ qu√©t b·∫•t k·ª≥ event n√†o
  
  const QRScannerScreen({
    super.key,
    this.event,
  });

  @override
  State<QRScannerScreen> createState() => _QRScannerScreenState();
}

class _QRScannerScreenState extends State<QRScannerScreen> {
  MobileScannerController? controller;
  bool isScanning = true;
  String? lastScannedCode;

  @override
  void initState() {
    super.initState();
    controller = MobileScannerController();
  }

  @override
  void dispose() {
    controller?.dispose();
    super.dispose();
  }

  void _onDetect(BarcodeCapture capture) {
    if (!isScanning) return;
    
    final List<Barcode> barcodes = capture.barcodes;
    for (final barcode in barcodes) {
      final code = barcode.rawValue;
      if (code != null && code != lastScannedCode) {
        lastScannedCode = code;
        // D·ª´ng scanning khi ph√°t hi·ªán QR code
        setState(() {
          isScanning = false;
        });
        _processQRCode(code);
      }
    }
  }

  Future<void> _processQRCode(String code) async {
    // Kh√¥ng c·∫ßn check isScanning v√¨ ƒë√£ ƒë∆∞·ª£c set false ·ªü _onDetect

    // Stop camera
    await controller?.stop();

    // Show processing dialog
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => const Center(
        child: Card(
          child: Padding(
            padding: EdgeInsets.all(20),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                CircularProgressIndicator(),
                SizedBox(height: 16),
                Text('ƒêang x·ª≠ l√Ω m√£ QR...'),
              ],
            ),
          ),
        ),
      ),
    );

    try {
      final organizerStore = context.read<OrganizerStore>();
      
      // N·∫øu c√≥ event c·ª• th·ªÉ, check-in v√†o event ƒë√≥
      if (widget.event != null) {
        final success = await organizerStore.checkInAttendance(widget.event!.id.toString(), code);
        
        if (mounted) {
          Navigator.of(context).pop(); // Close loading dialog
          
          if (success) {
            _showSuccessDialog(code, widget.event!.title);
          } else {
            _showErrorDialog(organizerStore.error.value ?? 'Check-in th·∫•t b·∫°i');
          }
        }
      } else {
        // Student qu√©t QR - s·ª≠ d·ª•ng format EVENT-{event_id}
        final parsedData = _parseQRCode(code);
        if (parsedData != null) {
          final eventId = parsedData['event_id'];
          // S·ª≠ d·ª•ng format EVENT-{event_id} nh∆∞ backend expect
          final checkinCode = 'EVENT-${eventId}';
          
          print('üîç Student checkin_code: $checkinCode');
          print('üîç Event ID: $eventId');
          
          try {
            // Ki·ªÉm tra xem user ƒë√£ ƒëƒÉng k√Ω s·ª± ki·ªán ch∆∞a
            print('üîç Checking registration for event $eventId...');
            final isRegistered = await _checkUserRegistration(eventId);
            print('üîç Registration check result: $isRegistered');
            
            if (!isRegistered) {
              print('üîç User not registered, showing warning dialog');
              if (mounted) {
                Navigator.of(context).pop(); // Close loading dialog
                _showNotRegisteredDialog(eventId);
              }
              return;
            }
            
            print('üîç User is registered, proceeding with check-in...');
            
            final success = await organizerStore.checkInAttendance(
              eventId.toString(), 
              checkinCode
            );
            
            if (mounted) {
              Navigator.of(context).pop(); // Close loading dialog
              
            if (success) {
              // L·∫•y th√¥ng tin s·ª± ki·ªán ƒë·ªÉ hi·ªÉn th·ªã
              final eventInfo = await _getEventInfo(eventId);
              _showSuccessDialog(code, eventInfo);
            } else {
                // L·∫•y error message t·ª´ organizerStore ho·∫∑c fallback
                final errorMessage = organizerStore.error.value ?? 'Check-in th·∫•t b·∫°i';
                print('üîç Check-in failed: $errorMessage');
                _showErrorDialog(errorMessage);
              }
            }
          } catch (e) {
            print('üîç CheckIn Error: $e');
            if (mounted) {
              Navigator.of(context).pop(); // Close loading dialog
              _showErrorDialog(e.toString());
            }
          }
        } else {
          if (mounted) {
            Navigator.of(context).pop(); // Close loading dialog
            _showErrorDialog('M√£ QR kh√¥ng h·ª£p l·ªá');
          }
        }
      }
    } catch (e) {
      if (mounted) {
        Navigator.of(context).pop(); // Close loading dialog
        _showErrorDialog('L·ªói: $e');
      }
    }
  }

  Future<void> _createRegistrationWithCheckinCode(int eventId, String checkinCode) async {
    try {
      print('üîç Creating registration for event $eventId with checkin_code $checkinCode');
      
      // T·∫°o registration qua API v·ªõi checkin_code t·ª´ QR
      final response = await ApiService.instance.post('/registrations', {
        'event_id': eventId,
        'checkin_code': checkinCode,
        'status': 'registered',
        'user_id': AuthService.instance.currentUser?['id'] ?? 0,
      });
      
      print('üîç Registration created: $response');
    } catch (e) {
      print('üîç Registration creation failed: $e');
      // B·ªè qua l·ªói - c√≥ th·ªÉ registration ƒë√£ t·ªìn t·∫°i
    }
  }

  Map<String, dynamic>? _parseQRCode(String qrCode) {
    print('üîç Parsing QR code: $qrCode');
    
    try {
      // QR code c√≥ th·ªÉ ch·ª©a event ID ho·∫∑c JSON v·ªõi event ID
      // Th·ª≠ parse JSON tr∆∞·ªõc
      final Map<String, dynamic> data = jsonDecode(qrCode);
      print('üîç Parsed JSON: $data');
      
      final eventId = data['event_id'];
      final checkinCode = data['checkin_code'] ?? data['code'] ?? qrCode; // Fallback to original QR code
      
      if (eventId != null) {
        return {
          'event_id': eventId is int ? eventId : int.parse(eventId.toString()),
          'checkin_code': checkinCode,
        };
      }
      return null;
    } catch (e) {
      print('üîç JSON parse failed: $e');
      // N·∫øu kh√¥ng ph·∫£i JSON, th·ª≠ parse s·ªë tr·ª±c ti·∫øp
      try {
        final eventId = int.parse(qrCode);
        print('üîç Parsed as int: $eventId');
        return {
          'event_id': eventId,
          'checkin_code': qrCode,
        };
      } catch (e) {
        print('üîç Int parse failed: $e');
        // Th·ª≠ parse format EVENT-{id}-{timestamp}
        if (qrCode.startsWith('EVENT-')) {
          final parts = qrCode.split('-');
          if (parts.length >= 2) {
            final eventId = int.parse(parts[1]);
            print('üîç Parsed EVENT format: $eventId');
            return {
              'event_id': eventId,
              'checkin_code': qrCode,
            };
          }
        }
        print('üîç All parsing methods failed');
        return null;
      }
    }
  }

  void _showSuccessDialog(String code, String eventTitle) {
    final now = DateTime.now();
    final timeString = '${now.day}/${now.month}/${now.year} ${now.hour.toString().padLeft(2, '0')}:${now.minute.toString().padLeft(2, '0')}';
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        icon: const Icon(Icons.check_circle, color: Colors.green, size: 48),
        title: const Text('Check-in th√†nh c√¥ng!'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.green.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.green.withOpacity(0.3)),
              ),
              child: Column(
                children: [
                  Row(
                    children: [
                      const Icon(Icons.event, color: Colors.green, size: 20),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          eventTitle,
                          style: const TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 16,
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      const Icon(Icons.access_time, color: Colors.grey, size: 16),
                      const SizedBox(width: 8),
                      Text(
                        'Check-in l√∫c: $timeString',
                        style: const TextStyle(
                          fontSize: 12,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16),
            const Text(
              'B·∫°n ƒë√£ ƒë∆∞·ª£c check-in v√†o s·ª± ki·ªán th√†nh c√¥ng!',
              textAlign: TextAlign.center,
              style: TextStyle(fontSize: 14),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              _resumeScanning();
            },
            child: const Text('Ti·∫øp t·ª•c qu√©t'),
          ),
          FilledButton(
            onPressed: () {
              Navigator.of(context).pop();
              Navigator.of(context).pop(); // Go back to dashboard
            },
            child: const Text('Ho√†n th√†nh'),
          ),
        ],
      ),
    );
  }

  // T·∫°o EventModel t·ª´ API response
  EventModel _createEventModelFromApiResponse(Map<String, dynamic> eventData) {
    try {
      print('üîç Creating EventModel from API response...');
      print('üîç Event data keys: ${eventData.keys.toList()}');
      print('üîç Event data type: ${eventData.runtimeType}');
      print('üîç Event data: $eventData');
      
      // Parse department v√† category t·ª´ nested objects
      Map<String, dynamic>? department;
      Map<String, dynamic>? category;
      Map<String, dynamic>? organizer;
      
      try {
        print('üîç Parsing department...');
        final deptValue = eventData['department'];
        print('üîç Department value: $deptValue (${deptValue.runtimeType})');
        department = deptValue != null 
            ? deptValue as Map<String, dynamic> 
            : null;
        print('üîç Department parsed successfully: $department');
      } catch (e) {
        print('üîç Error parsing department: $e');
        department = null;
      }
      
      try {
        print('üîç Parsing category...');
        final catValue = eventData['category'];
        print('üîç Category value: $catValue (${catValue.runtimeType})');
        category = catValue != null 
            ? catValue as Map<String, dynamic> 
            : null;
        print('üîç Category parsed successfully: $category');
      } catch (e) {
        print('üîç Error parsing category: $e');
        category = null;
      }
      
      try {
        print('üîç Parsing organizer...');
        final orgValue = eventData['organizer'];
        print('üîç Organizer value: $orgValue (${orgValue.runtimeType})');
        organizer = orgValue != null 
            ? orgValue as Map<String, dynamic> 
            : null;
        print('üîç Organizer parsed successfully: $organizer');
      } catch (e) {
        print('üîç Error parsing organizer: $e');
        organizer = null;
      }
      
      print('üîç Department: $department');
      print('üîç Category: $category');
      print('üîç Organizer: $organizer');
      
      // T·∫°o dateText t·ª´ startAt
      String dateText = 'Ch∆∞a x√°c ƒë·ªãnh';
      if (eventData['start_at'] != null) {
        try {
          final startAt = DateTime.parse(eventData['start_at']);
          dateText = '${startAt.day}/${startAt.month}/${startAt.year}';
        } catch (e) {
          print('üîç Error parsing start_at: $e');
        }
      }
      
      // Parse c√°c field m·ªôt c√°ch an to√†n
      final id = eventData['id']?.toString() ?? '0';
      final title = eventData['title']?.toString() ?? 'S·ª± ki·ªán';
      final description = eventData['description']?.toString() ?? 'M√¥ t·∫£ s·ª± ki·ªán';
      final status = eventData['status']?.toString();
      final organizerId = eventData['organizer_id']?.toString();
      final venue = eventData['venue']?.toString();
      final categoryName = category?['name']?.toString() ?? 'Kh√°c';
      
      // Parse dates
      DateTime? createdAt;
      DateTime? updatedAt;
      DateTime? startAt;
      DateTime? endAt;
      
      if (eventData['created_at'] != null) {
        createdAt = DateTime.tryParse(eventData['created_at'].toString());
      }
      if (eventData['updated_at'] != null) {
        updatedAt = DateTime.tryParse(eventData['updated_at'].toString());
      }
      if (eventData['start_at'] != null) {
        startAt = DateTime.tryParse(eventData['start_at'].toString());
      }
      if (eventData['end_at'] != null) {
        endAt = DateTime.tryParse(eventData['end_at'].toString());
      }
      
      // Parse numbers
      int? maxAttendees;
      int? currentAttendees;
      
      if (eventData['capacity'] != null) {
        maxAttendees = int.tryParse(eventData['capacity'].toString());
      }
      if (eventData['capacity'] != null && eventData['seats_left'] != null) {
        final capacity = int.tryParse(eventData['capacity'].toString()) ?? 0;
        final seatsLeft = int.tryParse(eventData['seats_left'].toString()) ?? 0;
        currentAttendees = capacity - seatsLeft;
      }
      
      print('üîç Parsed fields: id=$id, title=$title, category=$categoryName');
      
      return EventModel(
        id: id,
        title: title,
        dateText: dateText,
        description: description,
        imageAsset: 'assets/logo/logo.png', // Default image
        status: status,
        organizerId: organizerId,
        createdAt: createdAt,
        updatedAt: updatedAt,
        maxAttendees: maxAttendees,
        currentAttendees: currentAttendees,
        location: venue,
        category: categoryName,
        startAt: startAt,
        endAt: endAt,
      );
    } catch (e) {
      print('üîç Error creating EventModel from API response: $e');
      // Fallback EventModel
      return EventModel(
        id: eventData['id']?.toString() ?? '0',
        title: eventData['title'] ?? 'S·ª± ki·ªán',
        dateText: 'Ch∆∞a x√°c ƒë·ªãnh',
        description: eventData['description'] ?? 'M√¥ t·∫£ s·ª± ki·ªán',
        imageAsset: 'assets/logo/logo.png',
      );
    }
  }

  // L·∫•y th√¥ng tin s·ª± ki·ªán
  Future<String> _getEventInfo(int eventId) async {
    try {
      final response = await ApiService.instance.get('/events/$eventId');
      
      // API c√≥ th·ªÉ tr·∫£ v·ªÅ data trong 'data' ho·∫∑c 'event' field
      dynamic eventData;
      if (response.containsKey('event')) {
        eventData = response['event'];
      } else if (response.containsKey('data')) {
        eventData = response['data'];
      } else {
        eventData = response;
      }
      
      return eventData?['title'] ?? 'S·ª± ki·ªán';
    } catch (e) {
      print('üîç Error getting event info: $e');
      return 'S·ª± ki·ªán';
    }
  }

  // Navigate ƒë·∫øn event detail ƒë·ªÉ ƒëƒÉng k√Ω
  void _navigateToEventDetail(int eventId) async {
    try {
      print('üîç Navigating to event detail for event ID: $eventId');
      
      // L·∫•y th√¥ng tin s·ª± ki·ªán t·ª´ API
      print('üîç Making API call to /events/$eventId');
      final response = await ApiService.instance.get('/events/$eventId');
      print('üîç API Response received: $response');
      print('üîç API Response type: ${response.runtimeType}');
      
      // API tr·∫£ v·ªÅ data trong 'event' field
      print('üîç Checking response structure...');
      print('üîç Response keys: ${response.keys.toList()}');
      print('üîç Response contains event: ${response.containsKey('event')}');
      
      // L·∫•y event data t·ª´ response['event']
      final eventData = response['event'];
      print('üîç Event data: $eventData');
      print('üîç Event data type: ${eventData.runtimeType}');
      
      if (eventData == null) {
        throw Exception('Event data is null');
      }
      
      // Ki·ªÉm tra eventData c√≥ ph·∫£i Map kh√¥ng
      if (eventData is! Map<String, dynamic>) {
        print('üîç Event data is not a Map: ${eventData.runtimeType}');
        throw Exception('Event data is not in expected format');
      }
      
      // T·∫°o EventModel t·ª´ API response
      print('üîç About to call _createEventModelFromApiResponse with data: $eventData');
      print('üîç Event data type before call: ${eventData.runtimeType}');
      final event = _createEventModelFromApiResponse(eventData);
      print('üîç Created EventModel: ${event.title}');
      
      // Navigate ƒë·∫øn event detail
      if (mounted) {
        Navigator.pushNamed(
          context,
          '/event-detail',
          arguments: event,
        );
      }
    } catch (e) {
      print('üîç Error navigating to event detail: $e');
      
      // Fallback: t·∫°o EventModel ƒë∆°n gi·∫£n v·ªõi th√¥ng tin t·ªëi thi·ªÉu
      try {
        final fallbackEvent = EventModel(
          id: eventId.toString(),
          title: 'S·ª± ki·ªán #$eventId',
          dateText: 'H√¥m nay',
          description: 'M√¥ t·∫£ s·ª± ki·ªán',
          imageAsset: 'assets/logo/logo.png',
          status: 'published',
          organizerId: '0',
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
          maxAttendees: 100,
          currentAttendees: 0,
          location: 'ƒê·ªãa ƒëi·ªÉm',
          category: 'Kh√°c',
          startAt: DateTime.now(),
          endAt: DateTime.now().add(const Duration(hours: 2)),
        );
        
        print('üîç Created fallback EventModel: ${fallbackEvent.title}');
        
        // Navigate v·ªõi fallback event
        if (mounted) {
          Navigator.pushNamed(
            context,
            '/event-detail',
            arguments: fallbackEvent,
          );
        }
      } catch (fallbackError) {
        print('üîç Fallback also failed: $fallbackError');
        // Cu·ªëi c√πng: hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Kh√¥ng th·ªÉ m·ªü chi ti·∫øt s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i.'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }

  // Ki·ªÉm tra xem user ƒë√£ ƒëƒÉng k√Ω s·ª± ki·ªán ch∆∞a
  Future<bool> _checkUserRegistration(int eventId) async {
    try {
      // Th·ª≠ endpoint m·ªõi v·ªõi format ƒë√∫ng
      final response = await ApiService.instance.get('/registrations/my');
      final data = response['data'] as List?;
      
      if (data == null || data.isEmpty) {
        print('üîç No registrations found for user');
        return false;
      }
      
      // T√¨m registration cho event c·ª• th·ªÉ
      final hasRegistration = data.any((registration) {
        final event = registration['event'];
        if (event != null && event['id'] == eventId) {
          print('üîç Found registration for event $eventId: ${registration['status']}');
          return true;
        }
        return false;
      });
      
      print('üîç User registration status for event $eventId: $hasRegistration');
      return hasRegistration;
    } catch (e) {
      print('üîç Check registration error: $e');
      // N·∫øu kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c, cho ph√©p check-in v√† ƒë·ªÉ backend x·ª≠ l√Ω
      return true;
    }
  }

  // Hi·ªÉn th·ªã dialog khi user ch∆∞a ƒëƒÉng k√Ω
  void _showNotRegisteredDialog(int eventId) {
    SuccessNotification.show(
      context: context,
      title: '‚ö†Ô∏è Ch∆∞a ƒëƒÉng k√Ω s·ª± ki·ªán',
      message: 'B·∫°n c·∫ßn ƒëƒÉng k√Ω tham gia s·ª± ki·ªán tr∆∞·ªõc khi c√≥ th·ªÉ check-in. Vui l√≤ng ƒëƒÉng k√Ω s·ª± ki·ªán tr∆∞·ªõc.',
      type: NotificationType.warning,
      onDismiss: () {
        Navigator.of(context).pop(); // Go back to scanner
        _resumeScanning();
      },
      onAction: () {
        Navigator.of(context).pop(); // Close notification
        Navigator.of(context).pop(); // Go back to scanner
        _navigateToEventDetail(eventId);
      },
    );
  }

  void _showErrorDialog(String message) {
    // Parse error message ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o th√¢n thi·ªán
    String friendlyMessage = _parseErrorMessage(message);
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        icon: const Icon(Icons.error, color: Colors.red, size: 48),
        title: const Text('Check-in th·∫•t b·∫°i'),
        content: Text(friendlyMessage),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              _resumeScanning();
            },
            child: const Text('Th·ª≠ l·∫°i'),
          ),
          FilledButton(
            onPressed: () {
              Navigator.of(context).pop();
              Navigator.of(context).pop(); // Go back to dashboard
            },
            child: const Text('ƒê√≥ng'),
          ),
        ],
      ),
    );
  }

  // Parse error message th√†nh th√¥ng b√°o th√¢n thi·ªán
  String _parseErrorMessage(String error) {
    if (error.contains('already checked in')) {
      return 'B·∫°n ƒë√£ check-in s·ª± ki·ªán n√†y r·ªìi. Kh√¥ng th·ªÉ check-in nhi·ªÅu l·∫ßn.';
    } else if (error.contains('not registered')) {
      return 'B·∫°n ch∆∞a ƒëƒÉng k√Ω tham gia s·ª± ki·ªán n√†y. Vui l√≤ng ƒëƒÉng k√Ω tr∆∞·ªõc khi check-in.';
    } else if (error.contains('event not found')) {
      return 'Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán. Vui l√≤ng ki·ªÉm tra l·∫°i m√£ QR.';
    } else if (error.contains('time window')) {
      return 'Th·ªùi gian check-in kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i th·ªùi gian s·ª± ki·ªán.';
    } else if (error.contains('422')) {
      return 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.';
    } else if (error.contains('404')) {
      return 'Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán. Vui l√≤ng ki·ªÉm tra l·∫°i m√£ QR.';
    } else if (error.contains('500')) {
      return 'L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.';
    } else {
      return 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.';
    }
  }

  void _resumeScanning() {
    setState(() {
      isScanning = true;
      lastScannedCode = null;
    });
    // Start l·∫°i camera sau khi ƒë√£ stop
    controller?.start();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Qu√©t QR Check-in'),
        backgroundColor: const Color(0xFF6C63FF),
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            onPressed: () {
              controller?.toggleTorch();
            },
            icon: const Icon(Icons.flash_on),
          ),
          IconButton(
            onPressed: () {
              controller?.switchCamera();
            },
            icon: const Icon(Icons.flip_camera_ios),
          ),
        ],
      ),
      body: Column(
        children: [
          // Event info
          if (widget.event != null)
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              color: const Color(0xFF6C63FF).withOpacity(0.1),
              child: Column(
                children: [
                  Text(
                    widget.event!.title,
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    widget.event!.dateText,
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            )
          else
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              color: const Color(0xFF6C63FF).withOpacity(0.1),
              child: const Column(
                children: [
                  Text(
                    'Qu√©t QR Check-in',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: 4),
                  Text(
                    'H∆∞·ªõng camera v·ªÅ ph√≠a m√£ QR ƒë·ªÉ check-in',
                    style: TextStyle(
                      color: Colors.grey,
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            ),
          
          // QR Scanner
          Expanded(
            child: Stack(
              children: [
                MobileScanner(
                  controller: controller!,
                  onDetect: _onDetect,
                ),
                
                // Instructions
                Positioned(
                  bottom: 50,
                  left: 20,
                  right: 20,
                  child: Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.black.withOpacity(0.7),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: const Text(
                      'ƒê·∫∑t m√£ QR trong khung vu√¥ng ƒë·ªÉ qu√©t',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.w500,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
